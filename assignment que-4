#include <iostream>
#include <cmath>

// Abstract base class for geometric shapes
class Shape {
public:
    // Pure virtual functions for area and perimeter
    virtual double area() const = 0;
    virtual double perimeter() const = 0;

    // Virtual destructor to ensure proper cleanup in derived classes
    virtual ~Shape() {}
};

// Circle class derived from Shape
class Circle : public Shape {
private:
    double radius;

public:
    // Constructor
    Circle(double r) : radius(r) {}

    // Implementation of pure virtual functions
    double area() const override {
        return 3.14 * radius * radius; // Pi * r^2
    }

    double perimeter() const override {
        return 2 * 3.14 * radius; // 2 * Pi * r
    }
};

// Rectangle class derived from Shape
class Rectangle : public Shape {
private:
    double length;
    double width;

public:
    // Constructor
    Rectangle(double l, double w) : length(l), width(w) {}

    // Implementation of pure virtual functions
    double area() const override {
        return length * width; // l * w
    }

    double perimeter() const override {
        return 2 * (length + width); // 2 * (l + w)
    }
};

// Triangle class derived from Shape
class Triangle : public Shape {
private:
    double side1;
    double side2;
    double side3;

public:
    // Constructor
    Triangle(double s1, double s2, double s3) : side1(s1), side2(s2), side3(s3) {}

    // Implementation of pure virtual functions
    double area() const override {
        // Heron's formula for the area of a triangle
        double s = (side1 + side2 + side3) / 2;
        return sqrt(s * (s - side1) * (s - side2) * (s - side3));
    }

    double perimeter() const override {
        return side1 + side2 + side3; // s1 + s2 + s3
    }
};

int main() {
    // Demonstrate the use of the class hierarchy
    Circle circle(5);
    Rectangle rectangle(4, 6);
    Triangle triangle(3, 4, 5);

    // Display the area and perimeter for each shape
    std::cout << "Circle - Area: " << circle.area() << ", Perimeter: " << circle.perimeter() << std::endl;
    std::cout << "Rectangle - Area: " << rectangle.area() << ", Perimeter: " << rectangle.perimeter() << std::endl;
    std::cout << "Triangle - Area: " << triangle.area() << ", Perimeter: " << triangle.perimeter() << std::endl;

    return 0;
}
